name: Build and Deploy to GKE
#gatilho para disparar o actions sempre que houver atualização no branch main
on:
  push:
    branches:
      - main
#variáveis utlizados 
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }} #ID do projeto no GCP
  GKE_CLUSTER: vivid-nomad-358913-gke    # Nome do cluster GKE.
  GKE_ZONE: us-central1   # Zona do cluster GKE.
  DEPLOYMENT_NAME: convert-app # nome da aplicação.
  IMAGE: convert #nome da imagem
  
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: SonarQube Quality Gate Check
      # You may pin to the exact commit or the version.
      # uses: SonarSource/sonarqube-quality-gate-action@15767f0e4eb489cfdd989dc717fa78c038d0de8a
      uses: SonarSource/sonarqube-quality-gate-action@v1.0.0
      with:
        # Location of the scanner metadata report file
        scanMetadataReportFile: .scannerwork/report-task.txt

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker no gcloud
    - run: |-
        gcloud --quiet auth configure-docker

    # Crednciais do GCP
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_RUN_ID" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_RUN_ID"
    #aplicação da versão da imagem utlizando o ID do Github actions 
    - name: Replace tokens
      uses: cschleiden/replace-tokens@v1.1
      with:
        files: '["**/deployment.yaml"]'

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_RUN_ID
        ./kustomize build . | kubectl apply -f -
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl get services -o wide
